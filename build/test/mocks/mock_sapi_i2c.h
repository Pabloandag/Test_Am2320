/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_SAPI_I2C_H
#define _MOCK_SAPI_I2C_H

#include "unity.h"
#include "sapi_i2c.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_sapi_i2c_Init(void);
void mock_sapi_i2c_Destroy(void);
void mock_sapi_i2c_Verify(void);




#define i2cInit_IgnoreAndReturn(cmock_retval) i2cInit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void i2cInit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define i2cInit_StopIgnore() i2cInit_CMockStopIgnore()
void i2cInit_CMockStopIgnore(void);
#define i2cInit_ExpectAndReturn(i2cNumber, clockRateHz, cmock_retval) i2cInit_CMockExpectAndReturn(__LINE__, i2cNumber, clockRateHz, cmock_retval)
void i2cInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, i2cMap_t i2cNumber, uint32_t clockRateHz, bool_t cmock_to_return);
typedef bool_t (* CMOCK_i2cInit_CALLBACK)(i2cMap_t i2cNumber, uint32_t clockRateHz, int cmock_num_calls);
void i2cInit_AddCallback(CMOCK_i2cInit_CALLBACK Callback);
void i2cInit_Stub(CMOCK_i2cInit_CALLBACK Callback);
#define i2cInit_StubWithCallback i2cInit_Stub
#define i2cRead_IgnoreAndReturn(cmock_retval) i2cRead_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void i2cRead_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define i2cRead_StopIgnore() i2cRead_CMockStopIgnore()
void i2cRead_CMockStopIgnore(void);
#define i2cRead_ExpectAndReturn(i2cNumber, i2cSlaveAddress, receiveDataBuffer, receiveDataBufferSize, sendReadStop, cmock_retval) i2cRead_CMockExpectAndReturn(__LINE__, i2cNumber, i2cSlaveAddress, receiveDataBuffer, receiveDataBufferSize, sendReadStop, cmock_retval)
void i2cRead_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, i2cMap_t i2cNumber, uint8_t i2cSlaveAddress, uint8_t* receiveDataBuffer, uint16_t receiveDataBufferSize, bool_t sendReadStop, bool_t cmock_to_return);
typedef bool_t (* CMOCK_i2cRead_CALLBACK)(i2cMap_t i2cNumber, uint8_t i2cSlaveAddress, uint8_t* receiveDataBuffer, uint16_t receiveDataBufferSize, bool_t sendReadStop, int cmock_num_calls);
void i2cRead_AddCallback(CMOCK_i2cRead_CALLBACK Callback);
void i2cRead_Stub(CMOCK_i2cRead_CALLBACK Callback);
#define i2cRead_StubWithCallback i2cRead_Stub
#define i2cRead_ReturnThruPtr_receiveDataBuffer(receiveDataBuffer) i2cRead_CMockReturnMemThruPtr_receiveDataBuffer(__LINE__, receiveDataBuffer, sizeof(uint8_t))
#define i2cRead_ReturnArrayThruPtr_receiveDataBuffer(receiveDataBuffer, cmock_len) i2cRead_CMockReturnMemThruPtr_receiveDataBuffer(__LINE__, receiveDataBuffer, (int)(cmock_len * (int)sizeof(*receiveDataBuffer)))
#define i2cRead_ReturnMemThruPtr_receiveDataBuffer(receiveDataBuffer, cmock_size) i2cRead_CMockReturnMemThruPtr_receiveDataBuffer(__LINE__, receiveDataBuffer, cmock_size)
void i2cRead_CMockReturnMemThruPtr_receiveDataBuffer(UNITY_LINE_TYPE cmock_line, uint8_t* receiveDataBuffer, int cmock_size);
#define i2cWrite_IgnoreAndReturn(cmock_retval) i2cWrite_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void i2cWrite_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define i2cWrite_StopIgnore() i2cWrite_CMockStopIgnore()
void i2cWrite_CMockStopIgnore(void);
#define i2cWrite_ExpectAndReturn(i2cNumber, i2cSlaveAddress, transmitDataBuffer, transmitDataBufferSize, sendWriteStop, cmock_retval) i2cWrite_CMockExpectAndReturn(__LINE__, i2cNumber, i2cSlaveAddress, transmitDataBuffer, transmitDataBufferSize, sendWriteStop, cmock_retval)
void i2cWrite_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, i2cMap_t i2cNumber, uint8_t i2cSlaveAddress, uint8_t* transmitDataBuffer, uint16_t transmitDataBufferSize, bool_t sendWriteStop, bool_t cmock_to_return);
typedef bool_t (* CMOCK_i2cWrite_CALLBACK)(i2cMap_t i2cNumber, uint8_t i2cSlaveAddress, uint8_t* transmitDataBuffer, uint16_t transmitDataBufferSize, bool_t sendWriteStop, int cmock_num_calls);
void i2cWrite_AddCallback(CMOCK_i2cWrite_CALLBACK Callback);
void i2cWrite_Stub(CMOCK_i2cWrite_CALLBACK Callback);
#define i2cWrite_StubWithCallback i2cWrite_Stub
#define i2cWrite_ReturnThruPtr_transmitDataBuffer(transmitDataBuffer) i2cWrite_CMockReturnMemThruPtr_transmitDataBuffer(__LINE__, transmitDataBuffer, sizeof(uint8_t))
#define i2cWrite_ReturnArrayThruPtr_transmitDataBuffer(transmitDataBuffer, cmock_len) i2cWrite_CMockReturnMemThruPtr_transmitDataBuffer(__LINE__, transmitDataBuffer, (int)(cmock_len * (int)sizeof(*transmitDataBuffer)))
#define i2cWrite_ReturnMemThruPtr_transmitDataBuffer(transmitDataBuffer, cmock_size) i2cWrite_CMockReturnMemThruPtr_transmitDataBuffer(__LINE__, transmitDataBuffer, cmock_size)
void i2cWrite_CMockReturnMemThruPtr_transmitDataBuffer(UNITY_LINE_TYPE cmock_line, uint8_t* transmitDataBuffer, int cmock_size);
#define i2cWriteRead_IgnoreAndReturn(cmock_retval) i2cWriteRead_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void i2cWriteRead_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define i2cWriteRead_StopIgnore() i2cWriteRead_CMockStopIgnore()
void i2cWriteRead_CMockStopIgnore(void);
#define i2cWriteRead_ExpectAndReturn(i2cNumber, i2cSlaveAddress, dataToReadBuffer, dataToReadBufferSize, sendWriteStop, receiveDataBuffer, receiveDataBufferSize, sendReadStop, cmock_retval) i2cWriteRead_CMockExpectAndReturn(__LINE__, i2cNumber, i2cSlaveAddress, dataToReadBuffer, dataToReadBufferSize, sendWriteStop, receiveDataBuffer, receiveDataBufferSize, sendReadStop, cmock_retval)
void i2cWriteRead_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, i2cMap_t i2cNumber, uint8_t i2cSlaveAddress, uint8_t* dataToReadBuffer, uint16_t dataToReadBufferSize, bool_t sendWriteStop, uint8_t* receiveDataBuffer, uint16_t receiveDataBufferSize, bool_t sendReadStop, bool_t cmock_to_return);
typedef bool_t (* CMOCK_i2cWriteRead_CALLBACK)(i2cMap_t i2cNumber, uint8_t i2cSlaveAddress, uint8_t* dataToReadBuffer, uint16_t dataToReadBufferSize, bool_t sendWriteStop, uint8_t* receiveDataBuffer, uint16_t receiveDataBufferSize, bool_t sendReadStop, int cmock_num_calls);
void i2cWriteRead_AddCallback(CMOCK_i2cWriteRead_CALLBACK Callback);
void i2cWriteRead_Stub(CMOCK_i2cWriteRead_CALLBACK Callback);
#define i2cWriteRead_StubWithCallback i2cWriteRead_Stub
#define i2cWriteRead_ReturnThruPtr_dataToReadBuffer(dataToReadBuffer) i2cWriteRead_CMockReturnMemThruPtr_dataToReadBuffer(__LINE__, dataToReadBuffer, sizeof(uint8_t))
#define i2cWriteRead_ReturnArrayThruPtr_dataToReadBuffer(dataToReadBuffer, cmock_len) i2cWriteRead_CMockReturnMemThruPtr_dataToReadBuffer(__LINE__, dataToReadBuffer, (int)(cmock_len * (int)sizeof(*dataToReadBuffer)))
#define i2cWriteRead_ReturnMemThruPtr_dataToReadBuffer(dataToReadBuffer, cmock_size) i2cWriteRead_CMockReturnMemThruPtr_dataToReadBuffer(__LINE__, dataToReadBuffer, cmock_size)
void i2cWriteRead_CMockReturnMemThruPtr_dataToReadBuffer(UNITY_LINE_TYPE cmock_line, uint8_t* dataToReadBuffer, int cmock_size);
#define i2cWriteRead_ReturnThruPtr_receiveDataBuffer(receiveDataBuffer) i2cWriteRead_CMockReturnMemThruPtr_receiveDataBuffer(__LINE__, receiveDataBuffer, sizeof(uint8_t))
#define i2cWriteRead_ReturnArrayThruPtr_receiveDataBuffer(receiveDataBuffer, cmock_len) i2cWriteRead_CMockReturnMemThruPtr_receiveDataBuffer(__LINE__, receiveDataBuffer, (int)(cmock_len * (int)sizeof(*receiveDataBuffer)))
#define i2cWriteRead_ReturnMemThruPtr_receiveDataBuffer(receiveDataBuffer, cmock_size) i2cWriteRead_CMockReturnMemThruPtr_receiveDataBuffer(__LINE__, receiveDataBuffer, cmock_size)
void i2cWriteRead_CMockReturnMemThruPtr_receiveDataBuffer(UNITY_LINE_TYPE cmock_line, uint8_t* receiveDataBuffer, int cmock_size);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
